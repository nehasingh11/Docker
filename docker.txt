1. Why use Docker ?
   Docker makes it really easy to install and run software without worrying about setup or dependencies 

2. What is Docker ?
   Docker is a platform or ecosystem around creating and running containers.
   Docker ecosystem has:
   Docker client, Docker server, Docker machine, Docker images, Docker Hub, Docker compose 

3. What is image ?
   Single file with all the dependencies and config required to run a program. It has File System Snapshot and Startup command. 

4. What is Container ?
   Instance of an image. Runs a program. It has its own storage, networking, memory. 

5. Docker Client (Docker CLI) - Tool that we are going to issue commands to 
   Docker Server (Docker Daemon) - Tool that is responsible for creating images, running containers, etc. 

6. Test the following command: To create and run a container from an image. 
  docker run hello-world

  Output:

   Hello from Docker!
   This message shows that your installation appears to be working correctly.

   To generate this message, Docker took the following steps:
   1. The Docker client contacted the Docker daemon.
   2. The Docker daemon pulled the "hello-world" image from the Docker Hub.
      (amd64)
   3. The Docker daemon created a new container from that image which runs the
      executable that produces the output you are currently reading.
   4. The Docker daemon streamed that output to the Docker client, which sent it
      to your terminal.


7. In the upcoming lecture, we will be running a command to create a new image using docker commit with this command:
   docker commit -c 'CMD ["redis-server"]' CONTAINERID
   If you are a Windows user you may get an error like "/bin/sh: [redis-server]: not found" or "No Such Container"
   Instead, try running the command like this:
   docker commit -c "CMD 'redis-server'" CONTAINERID

8. Buildkit will hide away much of its progress which is something the legacy builder did not do. In the upcoming lectures will be discussing some output that will be quickly hidden by default. In order to see this output, you will want to pass the progress flag to the build command:
   docker build --progress=plain .
   Additionally, you may also want to pass the no-cache flag:
   docker build --no-cache --progress=plain .
